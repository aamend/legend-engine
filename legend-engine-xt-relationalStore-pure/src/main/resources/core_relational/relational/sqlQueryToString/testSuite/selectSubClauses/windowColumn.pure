// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// import meta::pure::functions::tests::model::*;
import meta::relational::mapping::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::*;
import meta::relational::dbTestRunner::*;
import meta::pure::test::*;
import meta::pure::runtime::*;
import meta::relational::metamodel::*;
import meta::relational::runtime::*;
import meta::pure::alloy::connections::*;
import  meta::relational::metamodel::relation::*;


function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::selectSubClauses::windowColumn::windowAvg(config:DbTestConfig[1]):Boolean[1]
{ 
  let func ={|meta::relational::tests::model::simple::Person.all()
    ->project([
        col(p |$p.lastName,'lastName')
        ,col(p |$p.id,'id')
        ,col(window(p |$p.firstName ), func(p |$p.age->toOne(), y| $y->average()),'ageWindow')
    ])->sort([asc('id')])};

  let result = executeViaPlan($func, simpleRelationalMappingInc, meta::relational::tests::db, $config, meta::relational::extension::relationalExtensions());

  runDataAssertion($result, $config,
  | assertEquals($result.values.rows.values, ['Smith', 1, 23.0, 'Johnson', 2, 17.0, 'Hill', 3, 17.0, 'Allen', 4, 22.0, 'Roberts', 5, 34.0, 'Hill', 6, 32.0, 'Harris', 7, 35.0]);
    assertEquals($result.values.columns.name, ['lastName', 'id', 'ageWindow']);
  );
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::selectSubClauses::windowColumn::testWindowWithSortSingle(config:DbTestConfig[1]):Boolean[1]
{
  let func = {|meta::relational::tests::model::simple::Person.all()
    ->project([
        col(p |$p.lastName,'lastName')
        ,col(p |$p.id,'id')
        ,col(window(p |$p.firstName ),sortAsc(p |$p.lastName), func(p |$p.age->toOne(), y| $y->average()),'ageAverageWindow')
    ])->sort([asc('id')])};

  let result = executeViaPlan($func, simpleRelationalMappingInc, meta::relational::tests::db, $config, meta::relational::extension::relationalExtensions());

  runDataAssertion($result, $config,
  | assertEquals($result.values.rows.values, ['Smith', 1, 23.0, 'Johnson', 2, 17.0, 'Hill', 3, 12.0, 'Allen', 4, 22.0, 'Roberts', 5, 34.0, 'Hill', 6, 32.0, 'Harris', 7, 35.0]);
    assertEquals($result.values.columns.name, ['lastName', 'id', 'ageAverageWindow']);
  );
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::selectSubClauses::windowColumn::windowWithSortMultiple(config:DbTestConfig[1]):Boolean[1]
{
  let func ={|meta::relational::tests::model::simple::Person.all()
    ->project([
        col(p |$p.lastName,'lastName')
        ,col(p |$p.id,'id')
        ,col(window(p |$p.firstName ),sortAsc(p |$p.lastName), func(p |$p.age->toOne(), y| $y->average()),'ageAverageWindow')
        ,col(window(p |$p.manager.lastName->toOne() ),sortDesc(p |$p.manager.firstName->toOne()), func(p |$p.age->toOne(), y| $y->sum()),'ageSumWindow')
    ])->sort([asc('id')])};

  let result = executeViaPlan($func, simpleRelationalMappingInc, meta::relational::tests::db, $config, meta::relational::extension::relationalExtensions());

  runDataAssertion($result, $config,
  | assertEquals($result.values.rows.values, ['Smith', 1, 23.0, 35.0, 'Johnson', 2, 17.0, 22.0, 'Hill', 3, 12.0, 35.0, 'Allen', 4, 22.0, 123.0, 'Roberts', 5, 34.0, 123.0, 'Hill', 6, 32.0, 123.0, 'Harris', 7, 35.0, 123.0]);
    assertEquals($result.values.columns.name, ['lastName', 'id', 'ageAverageWindow', 'ageSumWindow']);
  );
}

function <<paramTest.Test>> meta::relational::tests::dbSpecificTests::sqlQueryTests::selectSubClauses::windowColumn::testWindowWithoutSortMultiple(config:DbTestConfig[1]):Boolean[1]
{
  let func ={|meta::relational::tests::model::simple::Person.all()
    ->project([
        col(p |$p.lastName,'lastName')
        ,col(p |$p.id,'id')
        ,col(window(p |$p.firstName ), func(p |$p.age->toOne(), y| $y->max()),'ageMaxWindow')
        ,col(window(p |$p.manager.lastName->toOne() ), func(p |$p.age->toOne(), y| $y->sum()),'ageSumWindow')
    ])->sort([asc('id')])};

  let result = executeViaPlan($func, simpleRelationalMappingInc, meta::relational::tests::db, $config, meta::relational::extension::relationalExtensions());

  runDataAssertion($result, $config,
  | assertEquals($result.values.rows.values, ['Smith', 1, 23.0, 35.0, 'Johnson', 2, 22.0, 22.0, 'Hill', 3, 22.0, 35.0, 'Allen', 4, 22.0, 123.0, 'Roberts', 5, 34.0, 123.0, 'Hill', 6, 32.0, 123.0, 'Harris', 7, 35.0, 123.0]);
    assertEquals($result.values.columns.name, ['lastName', 'id', 'ageMaxWindow', 'ageSumWindow']);
  );
}